name: Playwright Tests

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]



jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Install allurectl    
        uses: allure-framework/setup-allurectl@v1
        with:
          allure-endpoint: https://allure.autotests.cloud/
          allure-token: 011fe067-9a03-49bf-b1ca-c7db4b20bbaf
          allure-project-id: 4539
        
      - name: Get Allure launch 
        id: status 
        run: |
          export $(allurectl job-run env)
          echo "[Allure Report]($ALLURE_LAUNCH_URL)" >> $GITHUB_STEP_SUMMARY
          echo allure-report-link=$ALLURE_LAUNCH_URL >> $GITHUB_OUTPUT
          echo allure-launch-id=$ALLURE_LAUNCH_ID >> $GITHUB_OUTPUT
          printenv | grep ALLURE_ 
        env: 
            ALLURE_LAUNCH_URL: $ALLURE_LAUNCH_URL


      - name: Run Playwright tests with Allure
        run: |
          allurectl watch --results allure-results -- npx playwright test

      - uses: actions/upload-artifact@master
        with:
          name: allure-results
          path: allure-results
          retention-days: 1
      

      - name: Get Allure history
        uses: actions/checkout@v3
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: Generate allure
        uses: simple-elf/allure-report-action@master
        if: always()
        id: allure-report
        with:
          allure_results: allure-results
          gh_pages: gh-pages
          allure_report: allure-report
          allure_history: allure-history
          keep_reports: 1

      - name: Deploy report to Github Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: allure-history
          publish_branch: gh-pages

      - name: List Allure results directory
        if: always()
        run: |
            echo "Listing contents of allure-results directory:"
            ls -R allure-results    

      - uses: daun/playwright-report-summary@v3
        id: playwright-report-summary
        if: always() && job.status != 'cancelled'
        with:
          report-file: playwright-report/test_result_json.json            

 
      - name: Prepare report info
        if: always()
        id: prepare-report-info
        run: |
          filePath="playwright-report/test_result_json.json"
          PASSED=$(jq '.stats.expected // 0' $filePath)
          FAILED=$(jq '.stats.unexpected // 0' $filePath)
          SKIPPED=$(jq '.stats.skipped // 0' $filePath)
          FLAKY=$(jq '.stats.flaky // 0' $filePath)
          TOTAL=$((PASSED + FAILED + SKIPPED + FLAKY))
            else
              echo "Allure results file not found: $filePath"
              exit 1
            fi          

      - name: Send Telegram notification
        if: always()
        run: |
          STATUS="Tests completed"
          if [ "${{ job.status }}" == "success" ]; then
          STATUS="Tests passed successfully"
          elif [ "${{ job.status }}" == "failure" ]; then
          STATUS="Tests failed"
          fi
          REPORT_URL=${{ steps.status.outputs.allure-report-link }}
          MESSAGE="$STATUS. View the report at $REPORT_URL\n\nTotal: $TOTAL\nPassed: $PASSED\nFailed: $FAILED\nSkipped: $SKIPPED\nBroken: $BROKEN"
          curl -s -X POST https://api.telegram.org/bot7219043015:AAFQKdgpzThlEqdoAxMh06ylpBXFy7n7ngo/sendMessage -d chat_id=-4783026865 -d text="$MESSAGE"